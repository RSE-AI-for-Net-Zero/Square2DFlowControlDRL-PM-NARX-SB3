Bootstrap: docker
From: python:3.7-bookworm

%post
    apt update
    apt install -y build-essential gfortran liblapack3 libblas3 libblas-dev liblapack-dev

    # Install Cmake
    # thanks to https://www.softwarepronto.com/2022/09/dockerubuntu-installing-latest-cmake-on.html
    wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh \
      -q -O cmake-install.sh \
      && chmod u+x cmake-install.sh \
      && mkdir /opt/cmake-3.24.1 \
      && ./cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 \
      && rm cmake-install.sh \
      && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin
    
     # Install deps
     pip install -U pip


     pip install torch==1.13.1 \
     	 	 torchvision==0.14.1 \
		 torchaudio==0.13.1 \
		 sb3-contrib==2.0.0 \
		 tensorboard==2.11.2 \
         	 pickle5==0.0.12 \
		 scipy==1.7.3 \
		 peakutils==1.3.4 


    
     wget https://github.com/sasobadovinac/gmsh/archive/refs/tags/gmsh_3_0_6.tar.gz
     tar -xvf gmsh_3_0_6.tar.gz
     mkdir build && cd build

     # gmsh v3.0.6 not to be found on pyPI, so building from source
     # linker error occurs due to multiple definitions of objects declared in mmg3d/mesh.h,
     #   so disabling this in config

     cmake -S ../gmsh-gmsh_3_0_6/ -DENABLE_BUILD_DYNAMIC=1 -DENABLE_MMG3D=OFF
     cmake --build .
     cmake --build . --target install

     # ..................................................................................
     # Did this work?...  To test, try to compile & link a small binary .................
     # ....against libgmsh.so............................................................
     # ..................................................................................

     # Install fenics
     # First, install pybind11

     PYBIND11_VERSION=2.2.3
     wget -nc https://github.com/pybind/pybind11/archive/v${PYBIND11_VERSION}.tar.gz
     tar -xvf v${PYBIND11_VERSION}.tar.gz && cd pybind11-${PYBIND11_VERSION}
     mkdir build && cd build && cmake -DPYBIND11_TEST=off .. && make install

     pip install fenics-ffc --upgrade
     
     FENICS_VERSION=$(python3 -c"import ffc; print(ffc.__version__)")
     
     

     
%runscript
    echo "Hello!"